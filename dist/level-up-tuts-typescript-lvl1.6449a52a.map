{"version":3,"sources":["index.ts"],"names":["isOpen","firstName","myAge","list","me","Job","job","WebDev","phone","tablet","sayWord","word","restParams","_i","arguments","length","console","log","newName","newNameTwo","makeMargin","x","dog","sayName","_a","name","age","Type","createContent","contentType","Quiz","Type2","createContent2"],"mappings":"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","file":"level-up-tuts-typescript-lvl1.6449a52a.map","sourceRoot":"..","sourcesContent":["// Variables\nvar isOpen = false;\nvar firstName = 'Dan';\nvar myAge = 40;\nvar list = [0, 1, 2];\nvar me = [\"Dan\", 32, true];\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDev\"] = 0] = \"WebDev\";\n    Job[Job[\"WebDesigner\"] = 1] = \"WebDesigner\";\n    Job[Job[\"ProjectManager\"] = 2] = \"ProjectManager\";\n})(Job || (Job = {}));\n;\nvar job = Job.WebDev;\nvar phone = 'iPhone';\nvar tablet = 3;\n/*  Functions */\n// ? for optional params\n// the string before the arrow correlates to the return value\n// const sayWord = (word?: string): string => {\n//   console.log(word || \"Hello\");\n//   return word || \"Hello\";\n// }\n// sayWord(\"Dan\");\n// Default Params\n// Rest params work as expected\nvar sayWord = function (word) {\n    if (word === void 0) { word = \"Hello\"; }\n    var restParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        restParams[_i - 1] = arguments[_i];\n    }\n    console.log(word);\n    console.log(restParams);\n    return word;\n};\nsayWord(\"Dan\", \"The\", \"rest\", \"of\", \"the\", \"params\");\n/* Implicit Types */\nvar newName = 'Dan';\nnewName = 'Que'; // this works as the type string is inferred \n// newName = 10; // this does not work\n// Gets type from initial declaration not most recent variable change\nvar newNameTwo = newName;\n// newNameTwo = 10; // Error: Value is not a string\n/* Union Types with | */\nvar makeMargin = function (x) {\n    return \"margin: \" + x + \"px\";\n};\nmakeMargin(10);\nmakeMargin('10');\n/* Null Types */\nvar dog;\ndog = \"Lucie\";\nvar sayName = function (_a) {\n    var name = _a.name, age = _a.age;\n    console.log(name);\n    return name;\n};\nsayName({ name: 'Ruel' });\nsayName({ name: 'Que', age: 38 });\n/* Enums */\n// Numeric Enum\nvar Type;\n(function (Type) {\n    Type[Type[\"Video\"] = 0] = \"Video\";\n    Type[Type[\"BlogPost\"] = 1] = \"BlogPost\";\n    Type[Type[\"Quiz\"] = 2] = \"Quiz\"; // 2\n})(Type || (Type = {}));\nvar createContent = function (contentType) { };\ncreateContent(Type.Quiz);\nconsole.log(Type.Quiz);\n// String Enum\nvar Type2;\n(function (Type2) {\n    Type2[\"Video\"] = \"VIDEO\";\n    Type2[\"BlogPost\"] = \"BLOG_POST\";\n    Type2[\"Quiz\"] = \"QUIZ\";\n})(Type2 || (Type2 = {}));\nvar createContent2 = function (contentType) { };\ncreateContent2(Type2.Quiz);\nconsole.log(Type2.Quiz);\n"]}