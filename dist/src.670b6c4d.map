{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"src.670b6c4d.map","sourceRoot":"..","sourcesContent":["import { Person } from './Interfaces';\n\n// Variables\n\nconst isOpen: boolean = false;\n\nconst firstName: string = 'Dan';\n\nconst myAge: number = 40;\n\nconst list: number[] = [0, 1, 2];\n\nconst me: [string, number, boolean] = [\"Dan\", 32, true];\n\nenum Job { WebDev, WebDesigner, ProjectManager};\nconst job: Job = Job.WebDev; \n\nconst phone: any = 'iPhone';\nconst tablet: any = 3;\n\n/*  Functions */\n\n// ? for optional params\n// the string before the arrow correlates to the return value\n// const sayWord = (word?: string): string => {\n//   console.log(word || \"Hello\");\n//   return word || \"Hello\";\n// }\n\n// sayWord(\"Dan\");\n\n// Default Params\n// Rest params work as expected\nconst sayWord = (word = \"Hello\", ...restParams: string[]): string => {\n  console.log(word);\n  console.log(restParams);  \n  return word;\n}\n\nsayWord(\"Dan\", \"The\", \"rest\", \"of\", \"the\", \"params\");\n\n\n/* Implicit Types */\n\nlet newName = 'Dan';\n\nnewName = 'Que' // this works as the type string is inferred \n// newName = 10; // this does not work\n\n// Gets type from initial declaration not most recent variable change\nlet newNameTwo = newName;\n// newNameTwo = 10; // Error: Value is not a string\n\n/* Union Types with | */\nconst makeMargin = (x: string | number): string => {\nreturn `margin: ${x}px`;\n}\nmakeMargin(10)\nmakeMargin('10')\n\n/* Null Types */\nlet dog: string;\n\ndog = \"Lucie\";\n\n/* Interface */ \n\n// Moved to Interfaces.ts for module example\n// interface Person {\n//   name: string;\n//   age?: number; // optional param\n// }\n\nconst sayName = ({name, age}: Person): string => {\n  console.log(name);\n  return name;\n}\n\nsayName({name: 'Ruel'})\nsayName({name: 'Que', age: 38})\n\n/* Enums */ \n\n// Numeric Enum\nenum Type {\n  Video, // 0\n  BlogPost, // 1\n  Quiz // 2\n}\n\nconst createContent = (contentType: Type) => {}\n\ncreateContent(Type.Quiz)\nconsole.log(Type.Quiz);\n\n// String Enum\nenum Type2 {\n  Video = \"VIDEO\", \n  BlogPost = \"BLOG_POST\", \n  Quiz = \"QUIZ\"\n}\n\nconst createContent2 = (contentType: Type2) => {}\n\ncreateContent2(Type2.Quiz)\nconsole.log(Type2.Quiz);\n\n/* Classes */\n\nclass Team {\n  teamName: string;\n  // public teamName: string; // this is the same thing as above\n  // private teamName: string; // this is scoped only to the team class\n  constructor(teamName) {\n    this.teamName = teamName;\n  }\n  score(): string {\n    console.log('goal!');\n    return 'goal!!!!';\n    \n  }\n}\n\nconst redWings = new Team('Red Wings');\nredWings.score();\nredWings.teamName;\n\n\n/* Generics */ \nconst outputInput = <T>(arg: T): T => {\n  return arg;\n};\n\noutputInput('hi');\noutputInput(3);\n\n/* Duck Typing */\n\nclass Dancer implements Person {\n  name: string;\n  age?: number;\n  \n}\n\nlet ElNino: Person = new Dancer();\n\nconst fake = {\n  name: \"Nino\"\n}\n\nElNino = fake;"]}